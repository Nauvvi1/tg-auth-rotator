const { TelegramClient, Api } = require('telegram');
const { StringSession } = require('telegram/sessions');
const fs = require('fs');
const path = require('path');
const tunnel = require('tunnel');
const { rotateIpByPhone } = require('../utils/rotateIp');
const { getUsedProxyInfo } = require('../utils/getUsedProxyInfo');
const { saveProxy } = require('../bot/services/proxyStore');
const { generateRandomDevice } = require('../utils/randomDevice');
const { generateUserAgent } = require('../utils/userAgent');
const config = require('../config/env');

const apiId = Number(config.apiId);
const apiHash = config.apiHash;

const clients = new Map();
const sessionsDir = path.resolve(__dirname, '../sessions');

async function createHttpSocket(ip, port, proxy) {
  return new Promise((resolve, reject) => {
    const tunnelingAgent = tunnel.httpOverHttp({
      proxy: {
        host: proxy.host,
        port: proxy.port,
        proxyAuth: `${proxy.username}:${proxy.password}`,
      },
    });

    console.log(`[DEBUG] createHttpSocket –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Telegram —á–µ—Ä–µ–∑ ${proxy.host}:${proxy.port}`);

    tunnelingAgent.createSocket({ host: ip, port }, (err, socket) => {
      if (err) {
        console.error('[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:', err.message);
        return reject(err);
      }
      resolve(socket);
    });
  });
}

async function authorizeStart(phoneNumber) {
  console.log('[DEBUG] authorizeStart –∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–º–µ—Ä–æ–º:', phoneNumber);

  const { userAgent } = generateUserAgent();
  console.log('[DEBUG] üì± –°–ª—É—á–∞–π–Ω—ã–π User-Agent:', userAgent);

  const proxy = await rotateIpByPhone(phoneNumber, userAgent);
  saveProxy(phoneNumber, proxy);
  console.log('[DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏:', proxy);

  const sessionPath = path.join(sessionsDir, `${phoneNumber}.session.json`);
  const stringSession = fs.existsSync(sessionPath)
    ? fs.readFileSync(sessionPath, 'utf-8')
    : '';

  const deviceInfo = generateRandomDevice();
  console.log('[DEBUG] –°–ª—É—á–∞–π–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', deviceInfo);

  const client = new TelegramClient(
    new StringSession(stringSession),
    apiId,
    apiHash,
    {
      connectionRetries: 5,
      deviceModel: deviceInfo.deviceModel,
      systemVersion: deviceInfo.systemVersion,
      appVersion: '9.5.2 (27901)',
      langCode: 'en',
      systemLangCode: 'en-GB',
      socket: {
        connect: async ({ ip, port }) => createHttpSocket(ip, port, proxy),
      },
    }
  );

  await client.connect();
  await getUsedProxyInfo(client, proxy);
  clients.set(phoneNumber, client);

  if (stringSession) {
    console.log(`[DEBUG] –°–µ—Å—Å–∏—è –¥–ª—è ${phoneNumber} –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.`);
    return;
  }

  client.start({
    phoneNumber: () => Promise.resolve(phoneNumber),
    phoneCode: () => new Promise(() => {}),
    password: () => Promise.resolve(''),
    onError: (err) => {
      if (err.errorMessage === 'FLOOD') {
        console.error(`[FLOOD_WAIT]: –ü–æ–¥–æ–∂–¥–∏ ${err.seconds} —Å–µ–∫—É–Ω–¥`);
      } else {
        console.error('[ERROR in start()]:', err);
      }
    },
  }).then(() => {
    console.log(`[DEBUG] –ö–ª–∏–µ–Ω—Ç ${phoneNumber} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`);
  }).catch((err) => {
    console.error(`[ERROR] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ${phoneNumber}:`, err);
  });
}

module.exports = { authorizeStart, clients };
