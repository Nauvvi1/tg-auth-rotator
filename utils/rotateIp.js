const fs = require('fs');
const path = require('path');
const axios = require('axios');
const { HttpsProxyAgent } = require('https-proxy-agent');

const proxiesPath = path.resolve(__dirname, '../proxies.txt');

function getProxyByPhone(phoneNumber) {
  const lines = fs.readFileSync(proxiesPath, 'utf-8')
    .split('\n')
    .map(l => l.trim())
    .filter(Boolean);

  const index = Math.abs([...phoneNumber].reduce((acc, c) => acc + c.charCodeAt(0), 0)) % lines.length;
  const [proxyPart, rotateUrl] = lines[index].split('|');

  const parts = proxyPart.split(':');
  const host = parts[0];
  const port = parseInt(parts[1]);
  const username = parts[2];
  const password = parts.slice(3).join(':');

  return { host, port, username, password, rotateUrl };
}

async function rotateIpByPhone(phoneNumber, userAgent) {
  const proxy = getProxyByPhone(phoneNumber);

  if (proxy.rotateUrl) {
    try {
      console.log(`[DEBUG] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–æ—Ç–∞—Ü–∏—é IP: ${proxy.rotateUrl}`);
      await axios.get(proxy.rotateUrl, {
        timeout: 5000,
        headers: {
          'User-Agent': userAgent
        }
      });      
      console.log('[DEBUG] –†–æ—Ç–∞—Ü–∏—è IP —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    } catch (err) {
      console.warn('[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–æ—Ç–∞—Ü–∏—é IP:', err.message);
    }
  }

  try {
    const proxyUrl = `http://${proxy.username}:${proxy.password}@${proxy.host}:${proxy.port}`;
    const agent = new HttpsProxyAgent(proxyUrl);
  
    const fetch = (await import('node-fetch')).default;
    const response = await fetch('https://api.ipify.org?format=json', {
      agent,
      headers: {
        'User-Agent': userAgent
      },
      timeout: 7000
    });
    
  
    const data = await response.json();
    console.log('[DEBUG] üåç –í–Ω–µ—à–Ω–∏–π IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:', data.ip);
  } catch (err) {
    console.warn('[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:', err.message);
  }

  return proxy;
}

module.exports = { rotateIpByPhone };
